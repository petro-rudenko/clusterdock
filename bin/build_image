#!/usr/bin/env python
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse
import logging
import os
import sys
from os import listdir
from os.path import dirname, abspath, isdir, join

# This path hack allows this script to be run from any folder. Otherwise, running it from within
# the bin directory would lead to problems importing modules in the clusterdock package.
sys.path.insert(0, dirname(dirname(abspath(__file__))))

from clusterdock import Constants
from clusterdock.docker_utils import build_image, login, push_image

logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

images_folder = join(dirname(dirname(__file__)), 'clusterdock', 'images')

DEFAULT_DOCKER_REGISTRY_URL = Constants.DEFAULT.docker_registry_url

def main(args):
    image = '/'.join([item
                      for item in (args.registry_url, args.namespace,
                                   "clusterdock:{0}".format(args.image))
                      if item])
    dockerfile = join(images_folder, args.image, 'Dockerfile')
    build_image(dockerfile=dockerfile, tag=image)

    if args.push:
        if os.environ.get('DOCKER_REGISTRY_INSECURE') != 'true':
            login(username=os.environ['DOCKER_REGISTRY_USERNAME'],
                  password=os.environ['DOCKER_REGISTRY_PASSWORD'],
                  registry=args.registry_url)
        push_image(image)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Build a Docker image in the images subfolder.',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('--namespace', metavar='ns',
                        help='The namespace to use when tagging the image')
    parser.add_argument('-p', '--push', help='Push Docker image to registry after building',
                        action='store_true')
    parser.add_argument('-r', '--registry-url', metavar='url', default=DEFAULT_DOCKER_REGISTRY_URL,
                        help='URL of the Docker registry to use when naming and pushing the image')
    parser.add_argument('image', choices=[image for image in listdir(images_folder) if
                                          isdir(join(images_folder, image))],
                        help='Folder under ./image from which to build a Docker image')
    args = parser.parse_args()

    main(args)
